package org.mal_lang.kvmlang.test;

import core.Attacker;
import jdk.internal.jline.internal.TestAccessible;
import core.AttackStep;
import org.junit.jupiter.api.Test;


public class InstanceExploitTest extends KVMLangTest{

    private static class InstanceExploitModel {
        /**First model has no defenses active.
        * Second model has Patching active.
        * 
        * */  
        /**   First model   */
        public final Instance instance1 = new Instance("instance1");
        public final QemuKVM hypervisor1 = new QemuKVM("hypervisor1", false);
        public final Data data1 = new Data("data1", false);
        public final Data data2 = new Data("data2", false);

        /**---Second model--*/

        /**Application*/
        public final Application application1 = new Application("application1");

        public InstanceExploitModel() {
            hypervisor1.addSysExecutedInstances(instance1);
            instance1.addContainedData(data1);
            instance1.addGuestSysExecutedApps(application1);
            application1.addContainedData(data2);

        }
    }

    @test
    @Test
    public void testExploitBufferOverflow_Instance1_TC8() {
      printTestName(Thread.currentThread().getStackTrace()[1].getMethodName());
      var model = new InstanceBreakOutModel();
  
      var attacker = new Attacker();
      model.addAttacker(attacker,model.instance1.connect);
      model.addAttacker(attacker,model.instance1.authenticate);
      attacker.attack();
  
      
      model.instance1.authenticatedAccess.assertCompromisedInstantaneously();
      model.instance1.fullAccess.assertCompromisedInstantaneously();
      model.instance1.attemptExploitBufferOverflow.assertCompromisedInstantaneously();
      model.instance1.attemptExploitOutOfBoundsRead.assertCompromisedInstantaneously();
      model.hypervisor1.outOfBoundsReadORWrite.assertCompromisedInstantaneously();
      model.hypervisor1.guestInstanceDOS.assertCompromisedInstantaneously();
      model.instance1.deny.assertCompromisedInstantaneously();
      //Application is denyed, leads to denial of data.
      model.application1.deny.assertCompromisedInstantaneously();
      model.data2.deny.assertCompromisedInstantaneously();
      


      

    }
    
}